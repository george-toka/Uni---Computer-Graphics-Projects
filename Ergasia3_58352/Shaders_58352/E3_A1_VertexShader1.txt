#version 330 core

layout(location = 0) in vec3 inputPosition;
layout(location = 1) in vec3 inputNormal;
layout(location = 2) in vec2 inputTextureCoordinates;
layout(location = 3) in vec2 inputMatrixCoordinates;
layout(location = 4) in vec4 inputColor;

out vec3 normal;
out vec3 fragmentPosition;
out vec2 textureCoordinates;
out vec2 matrixCoordinates;
out vec4 planeColor;

uniform mat4 model;
uniform mat4 view;
uniform mat4 projection;

uniform mat3 normalTransformation;

//-------------Other Helpful Variables-----------------

//General
uniform int VertMaterialIndex;

//For 1st Cube
uniform bool SwapSwitch;

//For 2nd Cube
uniform float scaleFactor;

//For 3rd Cube
uniform float deltaTime;

void main()
{
	gl_Position = projection * view * model * vec4(inputPosition.x, inputPosition.y, inputPosition.z, 1.0);
	normal = normalTransformation * inputNormal;

	if(VertMaterialIndex == 0)
	{
		if(SwapSwitch)
			textureCoordinates.x = inputTextureCoordinates.x * (-1) + 1 ;

		else 
			textureCoordinates.x = inputTextureCoordinates.x;

		textureCoordinates.y = inputTextureCoordinates.y;
	}

	else if(VertMaterialIndex == 1)
	{
		textureCoordinates.x = scaleFactor * inputTextureCoordinates.x;
		textureCoordinates.y = scaleFactor * inputTextureCoordinates.y;
	}


	else if(VertMaterialIndex == 2)
	{
		textureCoordinates = inputTextureCoordinates;
	}


	else if(VertMaterialIndex == 3)
		textureCoordinates = inputTextureCoordinates;
	

	else if(VertMaterialIndex == 4)
	{
		planeColor = inputColor;
		
		matrixCoordinates.x = inputMatrixCoordinates.x;
		
		matrixCoordinates.y = inputMatrixCoordinates.y + 0.25 * deltaTime;
	}	

	// 4x4 * 4x1 = 4 x 1 -> 3 x 1
	fragmentPosition = vec3(model * vec4(inputPosition, 1.0f));
}